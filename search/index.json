[{"content":"557. Reverse Words in a String III  題目  只反轉句子裡面的單字，而不改變單字的順序。\n 範例  Input: s = \u0026#34;Let\u0026#39;s take LeetCode contest\u0026#34; Output: \u0026#34;s\u0026#39;teL ekat edoCteeL tsetnoc\u0026#34; Input: s = \u0026#34;God Ding\u0026#34; Output: \u0026#34;doG gniD\u0026#34;  解答  public class Solution { public string ReverseWords(string s) { string[] subs = s.Split(\u0026#34; \u0026#34;); for (int i = 0; i \u0026lt; subs.Length; i++) { subs[i] = new string(subs[i].Reverse().ToArray()); } return String.Join(\u0026#34; \u0026#34;, subs); } }  解題思路  先將句子切割成一個個單字的矩陣，再分別把每個單字做轉換，最後再合併成一個字串。\n 參考  https://leetcode.com/problems/reverse-words-in-a-string-iii/\n","date":"2021-10-21T20:46:32+08:00","permalink":"https://mindbreaker3310.github.io/posts/reverse-words-in-a-string-iii/","title":"Reverse Words in a String III"},{"content":"344. Reverse String  題目  反轉這個char[]，而不能使用其他記憶體空間。\n 範例  Input: s = [\u0026#34;h\u0026#34;,\u0026#34;e\u0026#34;,\u0026#34;l\u0026#34;,\u0026#34;l\u0026#34;,\u0026#34;o\u0026#34;] Output: [\u0026#34;o\u0026#34;,\u0026#34;l\u0026#34;,\u0026#34;l\u0026#34;,\u0026#34;e\u0026#34;,\u0026#34;h\u0026#34;] Input: s = [\u0026#34;H\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;n\u0026#34;,\u0026#34;n\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;h\u0026#34;] Output: [\u0026#34;h\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;n\u0026#34;,\u0026#34;n\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;H\u0026#34;]  解答  public class Solution { public void ReverseString(char[] s) { for (int i = 0; i \u0026lt; s.Length/2; i++) { char temp = s[i]; s[i] = s[s.Length - 1 - i]; s[s.Length - 1 - i] = temp; } } }  解題思路  就轉\u0026hellip;\n 參考  https://leetcode.com/problems/reverse-string/submissions/\n","date":"2021-10-21T20:45:46+08:00","permalink":"https://mindbreaker3310.github.io/posts/reverse-string/","title":"Reverse String"},{"content":"118. Pascal\u0026rsquo;s Triangle  題目  給要得行數，建立出Pascal三角形的陣列。\n\rPascal’s Triangle\r\n 範例  Input: numRows = 5 Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]] Input: numRows = 1 Output: [[1]]  解答  public class Solution { public IList\u0026lt;IList\u0026lt;int\u0026gt;\u0026gt; Generate(int numRows) { //建立二維陣列  int[][] ans = new int[numRows][]; for (int i = 0; i \u0026lt; numRows; i++) { ans[i] = new int[i + 1]; } for (int n = 0; n \u0026lt; numRows; n++) { for (int i = 0; i \u0026lt; ans[n].Length; i++) { if (i == 0 || i == ans[n].Length - 1) { ans[n][i] = 1; } else { ans[n][i] = ans[n - 1][i - 1] + ans[n - 1][i]; } } } return ans; } }  解題思路  每一層的第一個與最後一個都只會是1，中間第i個則是由上一層的第i-1、i個相加。\n 參考  https://leetcode.com/problems/pascals-triangle/\n","date":"2021-10-21T20:45:17+08:00","permalink":"https://mindbreaker3310.github.io/posts/rascals-triangle/","title":"Pascal's Triangle"},{"content":"566. Reshape the Matrix  題目  實作在Matlab非常好用的功能reshape，他可以將matrix變形。\n給一個二維matrix，將其換成r*c 的matrix。\n若不能轉換，則回傳原matrix。\n 範例  \r範例1\r\nInput: mat = [[1,2],[3,4]], r = 1, c = 4 Output: [[1,2,3,4]] \r範例2\r\nInput: mat = [[1,2],[3,4]], r = 2, c = 4 Output: [[1,2],[3,4]]  解答  { public int[][] MatrixReshape(int[][] mat, int r, int c) { int matRows = mat.Length; int matColumns = mat[0].Length; if (matRows * matColumns != r * c) { return mat; } //C#建立多維矩陣的方法 int[][] ans = new int[r][]; for (int i = 0; i \u0026lt; r; i++) { ans[i] = new int[c]; } int x = 0; int y = 0; for (int i = 0; i \u0026lt; r; i++) { for (int j = 0; j \u0026lt; c; j++) { if (y == matColumns) { x++; y = 0; } ans[i][j] = mat[x][y]; y++; } } return ans; } }  解題思路  方法有很多種，這算是最直覺的方式了，先建立要輸出的matrix，再由左至右(i)、由上至下(j)一個一個填入，而填入的數值也是如此移動(x, y)，遇到y == matColumns就換行。\n 參考  https://leetcode.com/problems/reshape-the-matrix/\n","date":"2021-10-21T20:44:35+08:00","permalink":"https://mindbreaker3310.github.io/posts/reshape-the-matrix/","title":"Reshape the Matrix"},{"content":"121. Best Time to Buy and Sell Stock  題目  給一個陣列代表每日股票的買賣價格，找出最好的買點與賣點。\n 範例  Input: prices = [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. Input: prices = [7,6,4,3,1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0.  解答  public class Solution { public int MaxProfit(int[] prices) { int b = 0; int s = 1; int maxProfit = 0; while (s \u0026lt; prices.Length) { if (prices[b] \u0026gt; prices[s]) { b = s; } else if (prices[b] \u0026lt; prices[s]) { int profit = prices[s] - prices[b]; if (profit \u0026gt; maxProfit) { maxProfit = profit; } } s++; } return maxProfit; } }  解題思路  設定兩個指標分別代表買點b與賣點s(買點隔一天)，當股票往下跌(買點\u0026gt;賣點)，把買點設為更低價的那一天，股票上漲時，買點不動，紀錄收益，找出最大收益。\n 參考  https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\n","date":"2021-10-20T20:36:55+08:00","permalink":"https://mindbreaker3310.github.io/posts/best-time-to-buy-and-sell-stock/","title":"Best Time to Buy and Sell Stock"},{"content":"350. Intersection of Two Arrays II  題目  給兩個陣列，找出這兩個陣列都有的數值，結果不需按照順序。\n 範例  Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2,2] Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [4,9] Explanation: [9,4] is also accepted.  解答  public class Solution { public int[] Intersect(int[] nums1, int[] nums2) { Array.Sort(nums1); Array.Sort(nums2); List\u0026lt;int\u0026gt; ansList = new List\u0026lt;int\u0026gt;(); int p1 = 0; int p2 = 0; while (p1 \u0026lt; nums1.Length \u0026amp;\u0026amp; p2 \u0026lt; nums2.Length) { if (nums1[p1] \u0026lt; nums2[p2]) { p1++; } else if (nums1[p1] \u0026gt; nums2[p2]) { p2++; } else if (nums1[p1] == nums2[p2]) { ansList.Add(nums1[p1]); p1++; p2++; } } int[] ans = ansList.ToArray(); return ans; } }  解題思路  先把兩個陣列都排序，並分別給他們一個指標，當兩個指標指向的值相等的時候，就加到List內。\n 參考  https://leetcode.com/problems/intersection-of-two-arrays-ii/\n","date":"2021-10-20T20:33:59+08:00","permalink":"https://mindbreaker3310.github.io/posts/intersection-of-two-arrays/","title":"Intersection of Two Arrays II"},{"content":"167. Two Sum II - Input array is sorted  題目  給一個排序過的整數陣列與目標數，找出陣列中的兩個數值相加會等於目標數，並回傳這兩個數分別是第幾個數AKA index+1。\n只會有一個解，且不同重複使用相同的元素\n 範例  Input: numbers = [2,3,4], target = 6 Output: [1,3] Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. Input: numbers = [-1,0], target = -1 Output: [1,2] Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2.  解答  public class Solution { public int[] TwoSum(int[] numbers, int target) { int low = 0; int high = numbers.Length - 1; while (low \u0026lt; high) { int sum = numbers[low] + numbers[high]; if (sum == target) { break; } if (sum \u0026lt; target) { low++; } else { high--; } } return new int[] { low + 1, high + 1 }; } }  解題思路  在1. Two Sum這題裡面使用Dictionary的方式也可以，但是這一題它的陣列是已經排序過的，可以使用兩個指標來解決。\n相加最大與最小值若小於目標數的話，就增加一點，接近目標值low++，相反的，大於目標值就減少一點high--。\n 參考  https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/\n","date":"2021-10-20T20:30:23+08:00","permalink":"https://mindbreaker3310.github.io/posts/two-sum-2/","title":"Two Sum II | Input array is sorted"},{"content":"283. Move Zeroes  題目  ‎給一個陣列，把所有0都丟掉最後面。\n 範例  Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0] Input: nums = [0] Output: [0]  解答  public class Solution { public void MoveZeroes(int[] nums) { int p = 0; for (int i = 0; i \u0026lt; nums.Length; i++) { if (nums[i] != 0) { int temp = nums[p]; nums[p] = nums[i]; nums[i] = temp; } if (nums[p] != 0) { p++; } } } }  解題思路  兩個指標i、p，i每個次都會前進一步，遍歷整個陣列。p代表0的index位置，當nums[i]是0的時候p將不會跟著增加，等nums[i]不是0的時候，與其互換。\n 參考  https://leetcode.com/problems/move-zeroes/\n","date":"2021-10-20T20:27:32+08:00","permalink":"https://mindbreaker3310.github.io/posts/move-zeroes/","title":"Move Zeroes"},{"content":"189. Rotate Array  題目  ‎給一個陣列，將陣列向右旋轉k步。\n 範例  Input: nums = [1,2,3,4,5,6,7], k = 3 Output: [5,6,7,1,2,3,4] Explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4] Input: nums = [-1,-100,3,99], k = 2 Output: [3,99,-1,-100] Explanation: rotate 1 steps to the right: [99,-1,-100,3] rotate 2 steps to the right: [3,99,-1,-100]  解答  public class Solution { public void Rotate(int[] nums, int k) { if (nums.Length \u0026lt;= 1) { return; } k = k % nums.Length; Solution.Reverse(nums, 0, nums.Length - 1); Solution.Reverse(nums, 0, k - 1); Solution.Reverse(nums, k, nums.Length - 1); } public static void Reverse(int[] arr, int low, int high) { while (low \u0026lt; high) { int temp = arr[low]; arr[low] = arr[high]; arr[high] = temp; low++; high--; } } }  筆記  假設[1,2,3,4,5,6,7], k = 3\n先寫一個可以使陣列反轉的方法\n將整個陣列翻轉 [7,6,5,4,3,2,1] 接著翻轉0到k-1的部分 [5,6,7,4,3,2,1] 再翻轉剩下的部分 [5,6,7,1,2,3,4]\n 參考  https://leetcode.com/problems/rotate-array/\n","date":"2021-10-19T20:11:06+08:00","permalink":"https://mindbreaker3310.github.io/posts/rotate-array/","title":"Rotate Array"},{"content":"977. Squares of a Sorted Array  題目  給一個由排序到大的陣列，回傳每個數值都平方的排序陣列。\n 範例  Input: nums = [-4,-1,0,3,10] Output: [0,1,9,16,100] Explanation: After squaring, the array becomes [16,1,0,9,100]. After sorting, it becomes [0,1,9,16,100]. Input: nums = [-7,-3,2,3,11] Output: [4,9,9,49,121]  解答  public class Solution { public int[] SortedSquares(int[] nums) { int[] ans = new int[nums.Length]; int i = 0; int j = nums.Length - 1; int p = j; while (i \u0026lt;= j) { if (Math.Abs(nums[i]) \u0026gt; Math.Abs(nums[j])) { ans[p] = (int)Math.Pow(nums[i], 2); i++; } else { ans[p] = (int)Math.Pow(nums[j], 2); j--; } p--; } return ans; } }  筆記  設立三個指標 i:nums的第一個index j:nums的最後一個index p:nums要賦予值index，由最後面開始。\n因為平方的關係，只要絕對值越大，代表該數平方後會越大，較大的那邊，數值會被放在nums[p]的位置，然後移動該指標。\n 參考  https://leetcode.com/problems/squares-of-a-sorted-array/\n","date":"2021-10-19T20:07:04+08:00","permalink":"https://mindbreaker3310.github.io/posts/squares-of-a-sorted-array/","title":"Squares of a Sorted Array"},{"content":"88. Merge Sorted Array  題目  給予兩個非零部分由小到大排序的陣列nums1與nums2，m與n分別代表前面兩個陣列的長度。\n目標要將nums1與nums2合併，替換掉nums1內的0。\n 範例  Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1. Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The arrays we are merging are [1] and []. The result of the merge is [1].  解答  public class Solution { public void Merge(int[] nums1, int m, int[] nums2, int n) { int p = m + n - 1; m = m - 1; n = n - 1; while (m \u0026gt;= 0 \u0026amp;\u0026amp; n \u0026gt;= 0) { if (nums1[m] \u0026gt;= nums2[n]) { nums1[p] = nums1[m]; m--; } else { nums1[p] = nums2[n]; n--; } p--; } while (n \u0026gt;= 0) { nums1[p] = nums2[n]; n--; p--; } } }  筆記  設立三個指標 m:nums1最後一個非零數的index p:nums1最後一個index n:nums2最後一個數的index\n因為這兩個陣列都是由小排到大的，所以比較兩個陣列最大的值放到p的位置。看圖可能比較快XD\n 參考  https://leetcode.com/problems/merge-sorted-array/\n","date":"2021-10-19T20:03:08+08:00","permalink":"https://mindbreaker3310.github.io/posts/merge-sorted-array/","title":"Merge Sorted Array"},{"content":"1. Two Sum  題目  給一整數陣列與目標數，找出陣列中的兩個數值相加會等於目標數，並回傳這兩個數的index。\n只會有一個解，且不同重複使用相同的元素\n 範例  Input: nums = [2,7,11,15], target = 9 Output: [0,1] Output: Because nums[0] + nums[1] == 9, we return [0, 1]. Input: nums = [3,2,4], target = 6 Output: [1,2]  解答  public class Solution { public int[] TwoSum(int[] nums, int target) { Dictionary\u0026lt;int, int\u0026gt; dict = new Dictionary\u0026lt;int, int\u0026gt;(); for (int i = 0; i \u0026lt; nums.Length; i++) { if (dict.ContainsKey(target - nums[i])) return new int[] { i, dict[target - nums[i]] }; else if (!dic.ContainsKey(nums[i])) dict.Add(nums[i], i); } return new int[2]; } }  筆記  建立個一Dictionary來存放已經找過的數值跟他的index，每一個迭代都先計算該數nums[i]與目標數target的差，再回去找是否有存在於Dict內。\n 參考  https://leetcode.com/problems/two-sum/\n","date":"2021-10-19T20:00:03+08:00","permalink":"https://mindbreaker3310.github.io/posts/two-sum/","title":"Two Sum"},{"content":"278. First Bad Version  題目  ‎給一個整數陣列，找到\u0026quot;連續\u0026quot;的子陣列（包含至少一個數位），它擁有最大的數值總和，並將其回傳‎‎。\n 範例  Input: n = 5, bad = 4 Output: 4 Explanation: call isBadVersion(3) -\u0026gt; false call isBadVersion(5) -\u0026gt; true call isBadVersion(4) -\u0026gt; true Then 4 is the first bad version. Input: n = 1, bad = 1 Output: 1  解答  public class Solution : VersionControl { public int FirstBadVersion(int n) { for (int i = n; i \u0026gt;= 1; i--) { if (!IsBadVersion(i)) { return i + 1; } } return 1; } } 直覺但是too slow! 搭配使用上一篇學習的Binary Search\npublic class Solution : VersionControl { public int FirstBadVersion(int n) { int low = 1; int high = n; while(low \u0026lt; high) { int mid = low + (high - low) / 2; if(IsBadVersion(mid)) { high = mid; } else { low = mid + 1; } } return high; } }  筆記  之所以while(low \u0026lt; high)與high = mid而不是while(low \u0026lt;= high)與high = mid -1，因為當mid是BadVersion時，前一個可能也是BadVersion，所以我們確保high都是BadVersion的範圍，進一步逼近low的。\n 參考  https://leetcode.com/problems/first-bad-version/\n","date":"2021-10-19T13:26:30+08:00","permalink":"https://mindbreaker3310.github.io/posts/first-bad-version/","title":"First Bad Version"},{"content":"53. Maximum Subarray  題目  ‎給一個整數陣列，找到\u0026quot;連續\u0026quot;的子陣列（包含至少一個數位），它擁有最大的數值總和，並將其回傳‎‎。\n 範例  Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6 Input: nums = [1] Output: 1  解答  public class Solution { public int MaxSubArray(int[] nums) { int currentSum = 0; int maxSum = nums[0]; for (int i = 0; i \u0026lt; nums.Length; i++) { currentSum += nums[i]; if (nums[i] \u0026gt; currentSum) { currentSum = nums[i]; } if (currentSum \u0026gt; maxSum) { maxSum = currentSum; } } return maxSum; } }  筆記  currentSum代表從前面往後加的總和，如果當nums[i]比前面加的總和還大時，那就從nums[i]開始重加currentSum = nums[i]\n當currentSum比maxSum還要大時，更新最大值\n 參考  https://leetcode.com/problems/maximum-subarray/\n","date":"2021-10-19T12:31:43+08:00","permalink":"https://mindbreaker3310.github.io/posts/maximum-subarray/","title":"Maximum Subarray"},{"content":"217. Contains Duplicate  題目  給一整數陣列，如果任何值在陣列中‎‎至少出現兩次‎‎，回傳true，否則回傳false。\n 範例  Input: nums = [1,2,3,1] Output: true Input: nums = [1,2,3,4] Output: false  解答  public class Solution { public bool ContainsDuplicate(int[] nums) { Array.Sort(nums); for (int i = 0; i \u0026lt; nums.Length - 1; i++) { if (nums[i] == nums[i + 1]) { return true; } } return false; } }  筆記  很直覺，先排序好陣列後，若有連續兩個數字相同，及代表有數值重複出現。\n 參考  https://leetcode.com/problems/contains-duplicate/\n","date":"2021-10-19T11:51:58+08:00","permalink":"https://mindbreaker3310.github.io/posts/contains-duplicate/","title":"Contains Duplicate"},{"content":"35. Search Insert Position  題目  ‎給一個整數陣列，找到\u0026quot;連續\u0026quot;的子陣列（包含至少一個數位），它擁有最大的數值總和，並將其回傳‎‎。\n 範例  Input: nums = [1,3,5,6], target = 5 Output: 2 Input: nums = [1,3,5,6], target = 2 Output: 1  解答  public class Solution { public int SearchInsert(int[] nums, int target) { int low = 0; int high = nums.Length - 1; while (low \u0026lt;= high) { int mid = low + (high - low) / 2; if (nums[mid] == target) { return mid; } else if (nums[mid] \u0026lt; target) { low = mid + 1; } else if (nums[mid] \u0026gt; target) { high = mid - 1; } } return low; } }  筆記  基本上與Binary Search的用法沒有區別，只差在return low的原因是當low \u0026lt;= high時，low的位置剛好會在target應該要在的位置上。\n 參考  https://leetcode.com/problems/search-insert-position/\n","date":"2021-10-18T22:16:12+08:00","permalink":"https://mindbreaker3310.github.io/posts/search-insert-position/","title":"Search Insert Pposition"},{"content":"704. Binary Search  題目  給一個由小到大排序的整數陣列nums與一個目標整數target，如果target存在於nums之中，回傳該目標數的index，否則回傳-1。\n時間複雜度必須為O(log n)。\n 範例  Input: nums = [-1,0,3,5,9,12], target = 9 Output: 4 Explanation: 9 exists in nums and its index is 4 Input: nums = [-1,0,3,5,9,12], target = 2 Output: -1 Explanation: 2 does not exist in nums so return -1  解答  public class Solution { public int Search(int[] nums, int target) { int low = 0; int high = nums.Length - 1; while(low \u0026lt;= high) { int mid = low + (high - low)/2; if(nums[mid] == target) { return mid; } else if(nums[mid] \u0026lt; target) { low = mid + 1; } else { high = mid - 1; } } return -1; } }  筆記  概念就是每一次都取low與high範圍內最中間的值nums[mid]並與目標target比較，如果與相等就代表找到目標數，回傳該數索引值mid，若target比較大，拉高下限值low就改設為mid + 1，反之target比較小，降低上限值high設為mid - 1。如下圖所示。\n\rpivot就是mid\r\nwhile(low \u0026lt;= high) 當一直找不到時low最終會超過high\n求兩個int的平均數時，最好不要使用(low + high)/2，因為當low + high相加的時候大於int.MaxValue (2^31 - 1)時會overflow，使用 int mid = low + ((high - low) / 2);就可以解決這個問題\n 參考  https://leetcode.com/problems/binary-search/ https://ai.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html\n","date":"2021-10-18T20:10:11+08:00","permalink":"https://mindbreaker3310.github.io/posts/binary-serarch/","title":"Binary search algorithm"}]