<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Disign Principle on MindBreaker3310</title>
    <link>https://mindbreaker3310.github.io/tags/disign-principle/</link>
    <description>Recent content in Disign Principle on MindBreaker3310</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Dec 2021 15:52:49 +0800</lastBuildDate><atom:link href="https://mindbreaker3310.github.io/tags/disign-principle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clean Architecture</title>
      <link>https://mindbreaker3310.github.io/posts/post/2021202_clean_architecture.md/</link>
      <pubDate>Thu, 02 Dec 2021 15:52:49 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/2021202_clean_architecture.md/</guid>
      <description>Clean Architecture  介紹  工作一陣子了，維護的系統也已經熟悉的許多了，但還有許多前人的智慧，一時之間是很難理解的XD，這時有一個乾淨的架構，或許上手的時間就可以更短了。
 一步步紀錄  建立一個訂單系統使用Clean Architecture
依照分層創建各個不同的Project， Ordering.API Ordering.Domain Ordering.Application Ordering.infrastructure
建立相依關係Project右鍵 &amp;gt;&amp;gt; Add &amp;gt;&amp;gt; Reference 相依關係
 開發Ordering.Domain Layer  我們要先建立兩個資料夾Common、Entities
Common 其中Common放的是我們建立Entity的基礎，含有兩個abstract class，EntityBase、ValueObject，
public abstract class EntityBase { public int Id { get; protected set; } public string CreatedBy { get; set; } public DateTime CreatedDate { get; set; } public string LastModifiedBy { get; set; } public DateTime? LastModifiedDate { get; set; } } 詳細定義與設計可以參考</description>
    </item>
    
    <item>
      <title>CQRS</title>
      <link>https://mindbreaker3310.github.io/posts/post/2021201_cqrs.md/</link>
      <pubDate>Wed, 01 Dec 2021 11:08:44 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/2021201_cqrs.md/</guid>
      <description>CQRS  筆記  CQRS(Command Query Responsibility Segregation)命令查詢分隔，目前看起來就是不再需要IRepository了，把它拆成Command(負責寫入資料庫的部分)與Query(只負責讀取的部分)。
可以增加資料庫的效能，Command的部分則會透過event的形式記錄起來再同步到DB上面。
我還是偏好原本的方法啊XD
 參考  https://ithelp.ithome.com.tw/articles/10237458</description>
    </item>
    
    <item>
      <title>Domain Driven Design 領域驅動設計</title>
      <link>https://mindbreaker3310.github.io/posts/post/2021130_ddd.md/</link>
      <pubDate>Tue, 30 Nov 2021 14:30:40 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/2021130_ddd.md/</guid>
      <description>Domain Driven Design  關於DDD  隨著科技進步，需求也是越來越複雜，更多的是需要專業領域人員與開發人員共同協作
DDD是一種基於領域知識來解決複雜業務問題的軟體開發方法論。
 Ubiquitous Language  使用通用語言就很重要了，講人話，減少溝通成本。 ex:下訂單大家就聽得懂，別講些什麼call Order API、B2C之類的
 Anemic Model  Anemic Model貧血模型是指那些只有getter、setter沒有行為能力的模型
LF2邪鬼(地獄火焰)防下功+防上跳+防前跳+防下跳+防上功 為例
Devil Max = new Devil(); //使用地獄火焰 Max.Defence().Down().Attack(); Max.Defence().Up().Jump(); Max.Defence().Left().Jump(); Max.Defence().Down().Jump(); Max.Defence().Up().Attack(); 導入DDD與專家討論過後，未來開發的人員直接看程式碼也看得懂在幹嘛
Devil Max = new Devil(); Max.HellFire();  與微服務的關係  很多時候Micorservices不知道怎麼做切割，這時候DDD就提供一個很好的方向去做業務分割。
 參考  https://ithelp.ithome.com.tw/articles/10216645 https://forum.gamer.com.tw/C.php?bsn=7648&amp;snA=3299</description>
    </item>
    
    <item>
      <title>SOLID、SoC</title>
      <link>https://mindbreaker3310.github.io/posts/post/2021129_solid%E5%8E%9F%E5%89%87.md/</link>
      <pubDate>Mon, 29 Nov 2021 16:10:40 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/2021129_solid%E5%8E%9F%E5%89%87.md/</guid>
      <description>SOLID、SoC  SOLID原則  Single responsibility principle 單一功能原則 認為一個class就應該只有一個任務要做，不做其他任務以外的事情，過去是很多不同的需求都用同一個Service，單一功能原則則是提供各種不同的Use Case給各個需求。 SRP示意圖
Open/ closed principle 開閉原則 一個class或Function對於他的擴展是開放的，但是對於修改是封閉的，意思就是不改變他的行為，但是可以增加新的功能。 就像是電動理髮刀，可以換上各種不同的刀頭(擴展)，但是機身本體是不能修改的(封閉)。
Liskov substitution principle 里氏替換原則 程式中的物件應該是可以在不改變正確性的前提下被他的子類所替換的概念，我們在使用「繼承」時，重要的是重複使用 (reuse) 已經寫好的行為，而不是將所有繼承的行為全部覆蓋。
Interface segregation principle 介面隔離原則 很多個客製化的interface比一個通用的interface還要來得更好管理，例如一個政客interface有提出政見()、拜票()、努力工作()，但事實上不是每一個政客都想實作努力工作XD，所以應該方別建兩個interface，政客介面:提出政見()、拜票()與工作介面:努力工作()。
Dependency inversion principle 依賴反轉原則 各個class之間的相依性應該越低越好，上層的class不該依賴下層的class DIP示意圖
 SoC(Separation of concerns) 關注點分離  關注點分離表示，以前端的例子來說，在過去我們是以「關注技術」的方式來分離成HTML、CSS、JavaScript，現今主流框架Vue則是採用「關注元件」的方式來分離，每一個Component都有各自的HTML、CSS、JavaScript。
 參考  https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1) https://medium.com/@f40507777/%E9%96%8B%E6%94%BE%E5%B0%81%E9%96%89%E5%8E%9F%E5%89%87-open-closed-principle-31d61f9d37a5 https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/%E7%AC%AC-10-%E7%AB%A0-%E9%A1%9E%E5%88%A5-clean-code-1c7898d11cd7</description>
    </item>
    
  </channel>
</rss>
