<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RabbitMQ on MindBreaker3310</title>
    <link>https://mindbreaker3310.github.io/tags/rabbitmq/</link>
    <description>Recent content in RabbitMQ on MindBreaker3310</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Jul 2022 15:04:29 +0800</lastBuildDate><atom:link href="https://mindbreaker3310.github.io/tags/rabbitmq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RabbitMQ重新理解</title>
      <link>https://mindbreaker3310.github.io/posts/post/20220706_rabbitmq%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3.md/</link>
      <pubDate>Wed, 06 Jul 2022 15:04:29 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20220706_rabbitmq%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3.md/</guid>
      <description>前言  之前寫了關於RabbitMQ的筆記
其實是記錄如何使用masstransit套件來快速的傳遞message
這個套件支援的功能與能夠設定的細節當然是沒有原生來得好
所以重新學習一下如何使用官方的套件
 Hello World!  實作最簡單的
Producer直接將Message丟入Queue再由Consumer處理完畢
架構圖
 發送端程式碼  class Send { public static void Main() { var factory = new ConnectionFactory() { HostName = &amp;#34;localhost&amp;#34; }; using (var connection = factory.CreateConnection())//連線至rabbitmq server  using (var channel = connection.CreateModel())//建立模型  { //宣告queue(如果不存在才會宣告)  channel.QueueDeclare(queue: &amp;#34;hello&amp;#34;,//queue名稱  durable: false, exclusive: false, autoDelete: false, arguments: null); //要傳送的訊息  string message = &amp;#34;Hello World!</description>
    </item>
    
    <item>
      <title>RabbitMQ筆記</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211228_rabbitmq%E7%AD%86%E8%A8%98.md/</link>
      <pubDate>Tue, 28 Dec 2021 11:33:55 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211228_rabbitmq%E7%AD%86%E8%A8%98.md/</guid>
      <description>前置作業  RabbitMQ的兔兔icon怪可愛的，可以想像成郵局，可以收信也可以送信，是一堆兔兔幫你送信~🐰
 安裝Docker 透過docker-compose來設定下載，alpine是輕量化體積較小的版本
#docker-compose.ymlabbitmq:image:rabbitmq:3-management-alpine#docker-compose.override.ymlrabbitmq:container_name:rabbitmqrestart:alwaysports:- &amp;#34;5672:5672&amp;#34;- &amp;#34;15672:15672&amp;#34;#DashBoard的portdocker up上去後，測試看看能不能連線到localhost:15672，可以就會進到登入畫面，第一次直接登入帳密都是guest。
 MassTransit🚎 集體搭車去RabbitMQ的概念(?)，這是專給.Net用的套件，讓我們更簡單的去使用RabbitMQ的功能
 建立Event製造機  建立EventBus.Messages項目專案
安裝必要套件
&amp;lt;PackageReference Include=&amp;#34;MassTransit&amp;#34; Version=&amp;#34;7.1.6&amp;#34; /&amp;gt; &amp;lt;PackageReference Include=&amp;#34;MassTransit.AspNetCore&amp;#34; Version=&amp;#34;7.1.6&amp;#34; /&amp;gt; &amp;lt;PackageReference Include=&amp;#34;MassTransit.RabbitMQ&amp;#34; Version=&amp;#34;7.1.6&amp;#34; /&amp;gt; 建立Base Event有ID與建構日期，讓其他Event去繼承它。
public class IntegrationBaseEvent { public IntegrationBaseEvent() { Id = Guid.NewGuid(); CreationDate = DateTime.UtcNow; } public IntegrationBaseEvent(Guid id, DateTime createDate) { Id = id; CreationDate = createDate; } public Guid Id { get; private set; } public DateTime CreationDate { get; private set; } } 建立結帳Event</description>
    </item>
    
  </channel>
</rss>
