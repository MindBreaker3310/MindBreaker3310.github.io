<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NuGet on MindBreaker3310</title>
    <link>https://mindbreaker3310.github.io/tags/nuget/</link>
    <description>Recent content in NuGet on MindBreaker3310</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jan 2022 13:20:59 +0800</lastBuildDate><atom:link href="https://mindbreaker3310.github.io/tags/nuget/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>APIGateway筆記</title>
      <link>https://mindbreaker3310.github.io/posts/post/20220114_apigateway%E7%AD%86%E8%A8%98.md/</link>
      <pubDate>Fri, 14 Jan 2022 13:20:59 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20220114_apigateway%E7%AD%86%E8%A8%98.md/</guid>
      <description>筆記  Api Gateway的設計有好幾種，通常來說一般只用一個Api Gw來當一個入口並不是個好主意，可以設計成SPA網頁用一個、手機App用一個、傳統網站用一個。
這邊使用的Api Gw是Ocelot
Ocelot是一個輕量化、容易擴充、開源的專案👍
 前置作業  開啟新專案 &amp;raquo; Empty .Net Project
NuGet安裝必要套件Ocelot
如果要使用快取功能的話，還要安裝Ocelot.Cache.CacheManager
 註冊與使用Ocelot服務 要使用快取功能才要加上AddCacheManager
public void ConfigureServices(IServiceCollection services) { services.AddOcelot() .AddCacheManager(settings =&amp;gt; settings.WithDictionaryHandle()); } public async void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //前略...  await app.UseOcelot(); }  建立閘道路由json檔案 建立一個類似appsettings.json依照環境是Development還是Debug來覆寫的檔案
 celot.json(維持空的)  ocelot.Development.json ocelot.Local.json(本地測試)    依照命名VS會自動合併
專案的環境變數ASPNETCORE_ENVIRONMENT要設定成Local
 設定Program.cs public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt; Host.CreateDefaultBuilder(args) .ConfigureAppConfiguration((hostingContext, config) =&amp;gt; { //會依照ASPNETCORE_ENVIRONMENT來讀取不同的檔案  config.</description>
    </item>
    
    <item>
      <title>FluentValidation</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211216_fluentvalidation%E9%A9%97%E8%AD%89%E5%A5%97%E4%BB%B6.md/</link>
      <pubDate>Thu, 16 Dec 2021 14:50:26 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211216_fluentvalidation%E9%A9%97%E8%AD%89%E5%A5%97%E4%BB%B6.md/</guid>
      <description>筆記  雖說在工作上能不用第三方套件就不用，但練習的時候想做什麼就做什麼吧，一切輕鬆、簡單最好了。可以考慮用看看。
紀錄一下常用的功能，範例取自訂單結帳前處理的部分。
using FluentValidation;//使用套件 public class CheckoutOrderCommandValidator : AbstractValidator&amp;lt;CheckoutOrderCommand&amp;gt;//要驗證的class { public CheckoutOrderCommandValidator() { //p代表property  RuleFor(p =&amp;gt; p.UserName)//驗證UserName  .NotEmpty().WithMessage(&amp;#34;UserName 必填&amp;#34;)//不可為空值，若為空值回傳訊息  .NotNull() .MaximumLength(50).WithMessage(&amp;#34;UserName 字數過長&amp;#34;); RuleFor(p =&amp;gt; p.EmailAddress) .NotEmpty().WithMessage(&amp;#34;EmailAddress 必填&amp;#34;); RuleFor(p =&amp;gt; p.TotalPrice) .NotEmpty().WithMessage(&amp;#34;TotalPrice 必填&amp;#34;) .GreaterThan(0).WithMessage(&amp;#34;TotalPrice 需要大於0&amp;#34;); } } 取得各個Validator
//這將會讀取所有Validator，只要有繼承AbstractValidator&amp;lt;TRequest&amp;gt;(來自FluentValidation) private readonly IEnumerable&amp;lt;IValidator&amp;lt;TRequest&amp;gt;&amp;gt; _validators; public ValidationBehaviour(IEnumerable&amp;lt;IValidator&amp;lt;TRequest&amp;gt;&amp;gt; validators) { _validators = validators; } 使用Validator
if (_validators.Any())//如果有Validator的話 { //驗證輸入  var context = new ValidationContext&amp;lt;TRequest&amp;gt;(request); //等待所有非同步執行結果 ( 對所有驗證項目進行非同步工作 )  var validationResults = await Task.</description>
    </item>
    
    <item>
      <title>AutoMapper - DI Version</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211125_automapper.md/</link>
      <pubDate>Thu, 25 Nov 2021 14:55:07 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211125_automapper.md/</guid>
      <description>筆記  可以輕鬆的轉換兩個class，讓程式碼變得更加簡短乾淨。
message CouponModel { int32 id = 1; string productName = 2; string description = 3; int32 amount = 4; } 在Grpc定義的優戶券模型
public class Coupon { public int Id { get; set; } public string ProductName { get; set; } public string Description { get; set; } public int Amount { get; set; } } 我們自己定義的模型
原先轉換需要像是這個樣子
Coupon coupon; CouponModel cm = new CouponModel{ id = coupon.Id, productName = coupon.</description>
    </item>
    
  </channel>
</rss>
