<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MindBreaker3310</title>
    <link>https://mindbreaker3310.github.io/post/</link>
    <description>Recent content in Posts on MindBreaker3310</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Jan 2022 13:31:49 +0800</lastBuildDate><atom:link href="https://mindbreaker3310.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>學習UML</title>
      <link>https://mindbreaker3310.github.io/posts/post/20220126%E5%AD%B8%E7%BF%92uml.md/</link>
      <pubDate>Wed, 26 Jan 2022 13:31:49 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20220126%E5%AD%B8%E7%BF%92uml.md/</guid>
      <description>筆記  老闆最近希望讓我去開發與設計一個管理公司內部合約與公文的檔管系統
以前在學校學習的已經還給老師啦XD
趁這個機會複習一下
一個系統開發不只包含了coding也同時有設計、品管、預算、測試、寫文件、上線與維護
常用的開發流程分為Waterfall與Agile
 Waterfall  Waterfall最適合幾乎確定需求且開發中不會有太多變動
主要可以分為五個步驟
 收集與分析需求 決定系統架構 實作 驗證 維護   收集與分析需求 與利益相關者保持距離並徹底紀錄需求
下面已建立note app為例
可以使用“必須”來條列式需求
  功能需求：
 APP必須可以記錄文字，也可以插入圖片或手寫塗鴉。 部分筆記內容必須設定密碼，避免被別人看見。 筆記內容必須可以自動同步到雲端硬碟上。    非功能性需求：
 必須支援ios10或更新版 必須減少不必要的資料傳輸，以降低伺服器的負擔    從功能需求我們可以分析出三個情境(epic)
 筆記的建立與編輯 隱私問題 雲端同步    情境1：筆記建立與編輯
 身為一個user，我要可以快速記下筆記。 身為一個user，我要能把圖片以附件的方式附上，避免影響到筆記的排版。 身為一個user，我要有手寫功能，讓我的筆記更有溫度。    情境2：隱私
 身為一個user，我要建立隱私筆記，只有我能存取它。 身為一個user，我要用密碼保護我的隱私筆記。    情境3：雲端同步
 身為一個user，我要打開app時，資料就已經同步成最新版。 身為一個user，我要能夠自動同步到雲端硬碟上，隨時備份不怕資料不見。    依照情境畫出Use Cases圖</description>
    </item>
    
    <item>
      <title>APIGateway筆記</title>
      <link>https://mindbreaker3310.github.io/posts/post/20220114_apigateway%E7%AD%86%E8%A8%98.md/</link>
      <pubDate>Fri, 14 Jan 2022 13:20:59 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20220114_apigateway%E7%AD%86%E8%A8%98.md/</guid>
      <description>筆記  Api Gateway的設計有好幾種，通常來說一般只用一個Api Gw來當一個入口並不是個好主意，可以設計成SPA網頁用一個、手機App用一個、傳統網站用一個。
這邊使用的Api Gw是Ocelot
Ocelot是一個輕量化、容易擴充、開源的專案👍
 前置作業  開啟新專案 &amp;raquo; Empty .Net Project
NuGet安裝必要套件Ocelot
如果要使用快取功能的話，還要安裝Ocelot.Cache.CacheManager
 註冊與使用Ocelot服務 要使用快取功能才要加上AddCacheManager
public void ConfigureServices(IServiceCollection services) { services.AddOcelot() .AddCacheManager(settings =&amp;gt; settings.WithDictionaryHandle()); } public async void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //前略...  await app.UseOcelot(); }  建立閘道路由json檔案 建立一個類似appsettings.json依照環境是Development還是Debug來覆寫的檔案
 celot.json(維持空的)  ocelot.Development.json ocelot.Local.json(本地測試)    依照命名VS會自動合併
專案的環境變數ASPNETCORE_ENVIRONMENT要設定成Local
 設定Program.cs public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt; Host.CreateDefaultBuilder(args) .ConfigureAppConfiguration((hostingContext, config) =&amp;gt; { //會依照ASPNETCORE_ENVIRONMENT來讀取不同的檔案  config.</description>
    </item>
    
    <item>
      <title>RabbitMQ筆記</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211228_rabbitmq%E7%AD%86%E8%A8%98.md/</link>
      <pubDate>Tue, 28 Dec 2021 11:33:55 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211228_rabbitmq%E7%AD%86%E8%A8%98.md/</guid>
      <description>前置作業  RabbitMQ的兔兔icon怪可愛的，可以想像成郵局，可以收信也可以送信，是一堆兔兔幫你送信~🐰
 安裝Docker 透過docker-compose來設定下載，alpine是輕量化體積較小的版本
#docker-compose.ymlabbitmq:image:rabbitmq:3-management-alpine#docker-compose.override.ymlrabbitmq:container_name:rabbitmqrestart:alwaysports:- &amp;#34;5672:5672&amp;#34;- &amp;#34;15672:15672&amp;#34;#DashBoard的portdocker up上去後，測試看看能不能連線到localhost:15672，可以就會進到登入畫面，第一次直接登入帳密都是guest。
 MassTransit🚎 集體搭車去RabbitMQ的概念(?)，這是專給.Net用的套件，讓我們更簡單的去使用RabbitMQ的功能
 建立Event製造機  建立EventBus.Messages項目專案
安裝必要套件
&amp;lt;PackageReference Include=&amp;#34;MassTransit&amp;#34; Version=&amp;#34;7.1.6&amp;#34; /&amp;gt; &amp;lt;PackageReference Include=&amp;#34;MassTransit.AspNetCore&amp;#34; Version=&amp;#34;7.1.6&amp;#34; /&amp;gt; &amp;lt;PackageReference Include=&amp;#34;MassTransit.RabbitMQ&amp;#34; Version=&amp;#34;7.1.6&amp;#34; /&amp;gt; 建立Base Event有ID與建構日期，讓其他Event去繼承它。
public class IntegrationBaseEvent { public IntegrationBaseEvent() { Id = Guid.NewGuid(); CreationDate = DateTime.UtcNow; } public IntegrationBaseEvent(Guid id, DateTime createDate) { Id = id; CreationDate = createDate; } public Guid Id { get; private set; } public DateTime CreationDate { get; private set; } } 建立結帳Event</description>
    </item>
    
    <item>
      <title>Docker容器化</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211227_docker%E5%AE%B9%E5%99%A8%E5%8C%96_mssqlserver.md/</link>
      <pubDate>Mon, 27 Dec 2021 10:52:40 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211227_docker%E5%AE%B9%E5%99%A8%E5%8C%96_mssqlserver.md/</guid>
      <description>建立Dockerfile  對專案項目按右鍵 &amp;raquo; Add &amp;raquo; Docker Support &amp;raquo; Linux &amp;raquo; 確定
該項目下面就會有Dockerfile，裡面是建立容器的指令文字檔
 建立Docker Compose  對專案項目按右鍵 &amp;raquo; Add &amp;raquo; Container Orchestrator Support(容器協調器支援) &amp;raquo; Docker Compose &amp;raquo; Linux &amp;raquo; 確定
可以將多個container合而為一，也會多一個Docker Compose 項目
#docker-compose.ymlservice:orderdb:#加入的serviceimage:mcr.microsoft.com/mssql/server:2019-latest#pull映像檔的位置#docker-compose.override.ymlservice:orderdb:container_name:orderdbenvironment:ACCEPT_EULA:&amp;#34;Y&amp;#34;SA_PASSWORD:&amp;#34;Max4129889&amp;#34;#system administrator密碼restart:alwaysports:- &amp;#34;1433:1433&amp;#34; 整合、執行映像檔  在終端機執行Docker-compose
docker-compose -f ./docker-compose.yml -f ./docker-compose.override.yml up -d 到這邊基本上就搞定了，查看一下容器有沒有好好運作~
如果出現ERROR: yaml.parser.ParserError: while parsing a block mapping之類的錯誤
很有可能是排版有誤，可以透過yml檢視器來進行查看
docker ps  SQL GUI  在windows裡的Visual Studio可以使用Server Explorer直接連線DB進行查看
在Mac下的Visual Studio貌似沒有這個功能，必須改用別的工具來進行查看
DBreaver
免費、好用、支持多種DB，推薦一下~😄</description>
    </item>
    
    <item>
      <title>nslookup查詢ip位置</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211223_nslookup%E6%9F%A5%E8%A9%A2ip%E4%BD%8D%E7%BD%AE.md/</link>
      <pubDate>Thu, 23 Dec 2021 09:46:07 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211223_nslookup%E6%9F%A5%E8%A9%A2ip%E4%BD%8D%E7%BD%AE.md/</guid>
      <description>nslookup  紀錄一下今天學到的指令，想要查詢網站或是資料庫的ip位置，就可以使用nslookup來查詢，在windows、mac也都可以用。
MacBook-Air ~ % nslookup www.google.com Server:	172.20.10.1 Address:	172.20.10.1#53 Non-authoritative answer: Name:	www.google.com Address: 142.251.42.228 前面是DNS的位置
Non-authoritative answer則是代表直接讀取DNS暫存，未認證的答案。</description>
    </item>
    
    <item>
      <title>Linq Expression</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211222_linqexpression.md/</link>
      <pubDate>Wed, 22 Dec 2021 15:24:54 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211222_linqexpression.md/</guid>
      <description>簡單介紹  在先前的簡潔架構Application Layer有寫通用的非同步Repository介面(Asynchronous Generic Repository)
在這裡面有很多奇怪的東西😱
先來看看通用的非同步Repository介面長什麼樣子
public interface IAsyncRepository&amp;lt;T&amp;gt; where T : EntityBase { Task&amp;lt;IReadOnlyList&amp;lt;T&amp;gt;&amp;gt; GetAllAsync(); Task&amp;lt;IReadOnlyList&amp;lt;T&amp;gt;&amp;gt; GetAsync(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; predicate); Task&amp;lt;IReadOnlyList&amp;lt;T&amp;gt;&amp;gt; GetAsync(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; predicate = null, Func&amp;lt;IQueryable&amp;lt;T&amp;gt;, IOrderedQueryable&amp;lt;T&amp;gt;&amp;gt; orderBy = null, string includeString = null, bool disableTracking = true); Task&amp;lt;IReadOnlyList&amp;lt;T&amp;gt;&amp;gt; GetAsync(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; predicate = null, Func&amp;lt;IQueryable&amp;lt;T&amp;gt;, IOrderedQueryable&amp;lt;T&amp;gt;&amp;gt; orderBy = null, List&amp;lt;Expression&amp;lt;Func&amp;lt;T, object&amp;gt;&amp;gt;&amp;gt; includes = null, bool disableTracking = true); Task&amp;lt;T&amp;gt; GetByIdAsync(int id); Task&amp;lt;T&amp;gt; AddAsync(T entity); Task UpdateAsync(T entity); Task DeleteAsync(T entity); } 在GetAsync()裡面有很多東西Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt;、Func&amp;lt;IQueryable&amp;lt;T&amp;gt;, IOrderedQueryable&amp;lt;T&amp;gt;&amp;gt;、List&amp;lt;Expression&amp;lt;Func&amp;lt;T, object&amp;gt;&amp;gt;&amp;gt;</description>
    </item>
    
    <item>
      <title>簡潔架構 Infrastructure Layer</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211222_%E7%B0%A1%E6%BD%94%E6%9E%B6%E6%A7%8Binfrastructure.md/</link>
      <pubDate>Wed, 22 Dec 2021 13:32:25 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211222_%E7%B0%A1%E6%BD%94%E6%9E%B6%E6%A7%8Binfrastructure.md/</guid>
      <description>基礎設施層，將我們Application Layer說的那些處理，連接到資料庫上。
在這一層我們將使用Entity Framework Core AKA EF Core，EFCore的目的是讓程式設計師能夠以熟習的語言去操作資料庫，而非使用sql語法然後再轉成我們的資料模型。
先去NuGet裝Microsoft.EntityFrameworkCore.SqlServer，使用.Net 5.0的話版本只支援到5.0.x以下，6.0.0不支援。
 Ordering.API  這跟infrastructure一樣，都是最外面一層，寫一起比較好整理吧
Controller 得利於mediator的handler，我們整個controller就是一個清爽，基本上就是建立Request，丟給Handler來處理，最後把資料回傳就搞定了。
[ApiController] [Route(&amp;#34;[controller]&amp;#34;)] public class OrderController : ControllerBase { private readonly IMediator _mediator; public OrderController(IMediator mediator) { _mediator = mediator; } [HttpGet(&amp;#34;{userName}&amp;#34;, Name = &amp;#34;GetOrder&amp;#34;)] [ProducesResponseType(typeof(IEnumerable&amp;lt;OrdersVm&amp;gt;), (int)HttpStatusCode.OK)] public async Task&amp;lt;ActionResult&amp;lt;IEnumerable&amp;lt;OrdersVm&amp;gt;&amp;gt;&amp;gt; GetOrdersByUserName(string userName) { //建立Request  var query = new GetOrdersListQuery(userName); //發送給Handler處理  List&amp;lt;OrdersVm&amp;gt; orders = await _mediator.Send(query); return Ok(orders); } [HttpPost(Name = &amp;#34;CheckoutOrder&amp;#34;)] [ProducesResponseType(StatusCodes.Status200OK)] public async Task&amp;lt;ActionResult&amp;lt;int&amp;gt;&amp;gt; CheckoutOrder([FromBody] CheckoutOrderCommand command) { var result = await _mediator.</description>
    </item>
    
    <item>
      <title>換憑證</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211221_%E6%8F%9B%E6%86%91%E8%AD%89.md/</link>
      <pubDate>Tue, 21 Dec 2021 13:22:15 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211221_%E6%8F%9B%E6%86%91%E8%AD%89.md/</guid>
      <description>憑證  主要的功能是確認公鑰擁有者的身份，避免我們拿到冒用者的公鑰。
要怎麼確定呢？找大家都信任的公正的第三方來，就是數位憑證認證機構(Certificate Authority，CA)。
要取得憑證，應先向CA提出申請，CA判明申請者的身分後，為之分配一個公鑰，並將該公鑰與其身分資訊繫結，為該整體簽名，簽名後的整體即為憑證，發還給申請者。
在公司用的通常是萬用憑證，連同子網域都可以用的憑證*.google.com，blog.google.com、mail.google.com等，都可以直接使用相同的憑證。
 溝通流程  用戶 - - - - - - HTTPS 伺服器您好，我支援TLS XX版本 - - - - - &amp;raquo; 伺服器
用戶 &amp;laquo; - - - - - - - Hi 這是我的憑證 - - - - - - - - - - - - 伺服器
用戶 確認憑證沒有問題&amp;hellip;(用CA的公鑰對那個憑證上的簽字進行驗證)
確認不是中間人後，就可以進行金鑰交換的步驟了，並經過各種演算法讓你可以直接傳資料，且不用擔心被竊聽。
 參考  https://zh.wikipedia.org/wiki/%E8%AF%81%E4%B9%A6%E9%A2%81%E5%8F%91%E6%9C%BA%E6%9E%84
https://www.youtube.com/watch?v=63tKc67T2jM
https://medium.com/@clu1022/%E9%82%A3%E4%BA%9B%E9%97%9C%E6%96%BCssl-tls%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B-%E4%B9%9D-ssl-communication-31a2a8a888a6</description>
    </item>
    
    <item>
      <title>WD Blue™ SN550 小開箱</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211220_sn550%E9%96%8B%E7%AE%B1.md/</link>
      <pubDate>Tue, 21 Dec 2021 09:41:12 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211220_sn550%E9%96%8B%E7%AE%B1.md/</guid>
      <description>購買原因  加入了XBOX Game Pass後，遊戲玩不完，空間不夠放了啊，原先地平線5是放在傳統硬碟裡，開車開到一半，路直接不見，進入遊戲也要等個3分鐘，速度實在太慢了。
沒什麼時間做功課，趕在雙12結束前下單優惠比較多，原本想要透過pchome+Line導購，一沒注意時間錯過了導購回饋的時間，改去蝦皮原價屋買，回饋少了一點，但也還行吧，2244$，沒時間解釋了，快上車。
由於我的主機板x470i剩主板後面一個m.2插槽可以用，背面沒有散熱片可以用，itx機殼又容易積熱，所以主要訴求是希望硬碟溫度能夠低，發熱量小點。
藍藍的看起來很清涼🥶
順帶一提，過去擁有不少顆傳統硬碟(大概8、9顆)，只壞過WD牌的，個人覺得最耐操的是HGST(在被WD買下前)，可惜現在都買不到了，現在這顆我也還在服役，就是速度慢了些。再給吃過HGST口水的WD一個機會。
 移動遊戲到新硬碟裡  設定 &amp;raquo; 應用程式 &amp;raquo; 找到遊戲 &amp;raquo; 移動
就可以直接移動到新的硬碟去了，還好不用重新下載幾百G的檔案。
 曬一下電腦照  itx就是桌面吸塵器
這台電腦自從裝好後就再也沒拆過了，這組裝實在太麻煩了XD，有夠難裝，線也是我自己弄的，組完還蠻有成就感的。兩年前組好(顯卡二手+線材+沿用舊傳統硬碟)總花費大概為30000出頭，是非常貴的一格價格，我把實習賺的錢全部都砸在這台電腦上，要組itx很多東西都是要買特定規格的，能省錢的地方不多，而且電腦通常一組就好幾年，可以買價格合理，品質耐用的產品。
 CPU AMD Ryzen™ 5 3600 主機板 ROG STRIX X470-I GAMING 記憶體 Micron Ballistix Sport LT 3200 8G *2 顯示卡 ROG-STRIX-GTX1060-O6G-GAMING 電源 CORSAIR SF450 80Plus SSD PLEXTOR M9PeGn 1TB M.2 2280 PCIe SSD SSD WD Blue™ SN550 NVMe™ 硬碟 HGST 7200RPM 750GB 硬碟 TOSHIBA 5200RPM 500GB 機殼 K01 6.</description>
    </item>
    
    <item>
      <title>windows排程紀錄主機磁碟狀態</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211217_windows%E6%8E%92%E7%A8%8B%E7%B4%80%E9%8C%84%E4%B8%BB%E6%A9%9F%E7%A3%81%E7%A2%9F%E7%8B%80%E6%85%8B.md/</link>
      <pubDate>Fri, 17 Dec 2021 17:09:56 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211217_windows%E6%8E%92%E7%A8%8B%E7%B4%80%E9%8C%84%E4%B8%BB%E6%A9%9F%E7%A3%81%E7%A2%9F%E7%8B%80%E6%85%8B.md/</guid>
      <description>取得磁碟狀態  工作上總是一堆鳥事，在甲方裡工作有時候又要處理一些完全沒有意義的雜事，浪費時間。
總之因為不明原因，我需要每週紀錄主機的磁碟剩餘容量百分比&amp;hellip;
要取得磁碟訊息很簡單，使用System.IO的DriveInfo.GetDrives()可以取得所有磁碟，再把DriveInfo的屬性取出來
string diskStatus = &amp;#34;&amp;#34;; DriveInfo[] allDrives = DriveInfo.GetDrives(); foreach (DriveInfo d in allDrives) { if (d.IsReady == true)//確定磁碟就緒  { int freePercent = (int)(d.TotalFreeSpace / (float)d.TotalSize * 100); diskStatus += $&amp;#34; {d.Name}{freePercent} &amp;#34; } }  寫入紀錄(過時，改由Mail發送)  這邊一切以簡單為主，直接用寫入文字檔的方式來進行
//如果有額外輸入檔案路徑的話，就把第一個參數當作路徑，沒有就丟在桌面 //若不想在排程器那裡設定開始位置的話，就用絕對路徑吧。 string path = args.Length == 1 ? args[0] : &amp;#34;DiskLog.txt&amp;#34;; //記錄時間 string now = DateRime.Now.ToString(&amp;#34;yyyy/MM/dd HH:mm:ss&amp;#34;); using StreamWriter file = new (path, append: true); file.</description>
    </item>
    
    <item>
      <title>簡潔架構 Application Layer</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211217_%E7%B0%A1%E6%BD%94%E6%9E%B6%E6%A7%8Bapplication.md/</link>
      <pubDate>Fri, 17 Dec 2021 11:44:52 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211217_%E7%B0%A1%E6%BD%94%E6%9E%B6%E6%A7%8Bapplication.md/</guid>
      <description>Application Layer  注重於商業需求而不是實作一些外部系統的東西，DB之類的。
在這一層裡有三個主要的資料夾Contracts、Features、Behaviors，分別為存放服務介面、Use case、驗證用戶行為。
主要在於Fetures，根據DDD並使用MediatR為每一個需求做獨自的CQRS操作，
 Contracts  存放各Services的interface的地方
Persistence 通用的非同步Repository介面(Asynchronous Generic Repository)
裡面包含常用的功能。
//泛型T必需繼承Domina Layer的EntityBase(Id、createdBy、createDate、LastModifiedDate等等的東西) public interface IAsyncRepository&amp;lt;T&amp;gt; where T : EntityBase { Task&amp;lt;IReadOnlyList&amp;lt;T&amp;gt;&amp;gt; GetAllAsync(); Task&amp;lt;IReadOnlyList&amp;lt;T&amp;gt;&amp;gt; GetAsync(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; predicate); Task&amp;lt;IReadOnlyList&amp;lt;T&amp;gt;&amp;gt; GetAsync(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; predicate = null, Func&amp;lt;IQueryable&amp;lt;T&amp;gt;, IOrderedQueryable&amp;lt;T&amp;gt;&amp;gt; orderBy = null, string includeString = null, bool disableTracking = true); Task&amp;lt;IReadOnlyList&amp;lt;T&amp;gt;&amp;gt; GetAsync(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; predicate = null, Func&amp;lt;IQueryable&amp;lt;T&amp;gt;, IOrderedQueryable&amp;lt;T&amp;gt;&amp;gt; orderBy = null, List&amp;lt;Expression&amp;lt;Func&amp;lt;T, object&amp;gt;&amp;gt;&amp;gt; includes = null, bool disableTracking = true); Task&amp;lt;T&amp;gt; GetByIdAsync(int id); Task&amp;lt;T&amp;gt; AddAsync(T entity); Task UpdateAsync(T entity); Task DeleteAsync(T entity); } 下訂單Repository介面，在這邊我們可以建立自己的方法、功能，後面處理Request時會用到。</description>
    </item>
    
    <item>
      <title>FluentValidation</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211216_fluentvalidation%E9%A9%97%E8%AD%89%E5%A5%97%E4%BB%B6.md/</link>
      <pubDate>Thu, 16 Dec 2021 14:50:26 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211216_fluentvalidation%E9%A9%97%E8%AD%89%E5%A5%97%E4%BB%B6.md/</guid>
      <description>筆記  雖說在工作上能不用第三方套件就不用，但練習的時候想做什麼就做什麼吧，一切輕鬆、簡單最好了。可以考慮用看看。
紀錄一下常用的功能，範例取自訂單結帳前處理的部分。
using FluentValidation;//使用套件 public class CheckoutOrderCommandValidator : AbstractValidator&amp;lt;CheckoutOrderCommand&amp;gt;//要驗證的class { public CheckoutOrderCommandValidator() { //p代表property  RuleFor(p =&amp;gt; p.UserName)//驗證UserName  .NotEmpty().WithMessage(&amp;#34;UserName 必填&amp;#34;)//不可為空值，若為空值回傳訊息  .NotNull() .MaximumLength(50).WithMessage(&amp;#34;UserName 字數過長&amp;#34;); RuleFor(p =&amp;gt; p.EmailAddress) .NotEmpty().WithMessage(&amp;#34;EmailAddress 必填&amp;#34;); RuleFor(p =&amp;gt; p.TotalPrice) .NotEmpty().WithMessage(&amp;#34;TotalPrice 必填&amp;#34;) .GreaterThan(0).WithMessage(&amp;#34;TotalPrice 需要大於0&amp;#34;); } } 取得各個Validator
//這將會讀取所有Validator，只要有繼承AbstractValidator&amp;lt;TRequest&amp;gt;(來自FluentValidation) private readonly IEnumerable&amp;lt;IValidator&amp;lt;TRequest&amp;gt;&amp;gt; _validators; public ValidationBehaviour(IEnumerable&amp;lt;IValidator&amp;lt;TRequest&amp;gt;&amp;gt; validators) { _validators = validators; } 使用Validator
if (_validators.Any())//如果有Validator的話 { //驗證輸入  var context = new ValidationContext&amp;lt;TRequest&amp;gt;(request); //等待所有非同步執行結果 ( 對所有驗證項目進行非同步工作 )  var validationResults = await Task.</description>
    </item>
    
    <item>
      <title>更新從來就沒有好事情</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211216_%E6%9B%B4%E6%96%B0%E5%BE%9E%E4%BE%86%E5%B0%B1%E6%B2%92%E6%9C%89%E5%A5%BD%E4%BA%8B.md/</link>
      <pubDate>Thu, 16 Dec 2021 13:10:12 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211216_%E6%9B%B4%E6%96%B0%E5%BE%9E%E4%BE%86%E5%B0%B1%E6%B2%92%E6%9C%89%E5%A5%BD%E4%BA%8B.md/</guid>
      <description>案發原因  不知道有多久沒有更新我的Line了，也沒有什麼值得我更新的功能，這樣穩穩著用就挺好的，早上收到Line錢包提醒我必須在12/31號前更新到最新版，平常出門已經很習慣Pay來Pay去了，得很方便，所以只能更新了。
BOOM!
更新完後Line直接閃退，再也打不開了，卸載重裝、重新開機都試過了，更新iOS到最新版本還是打不開，只好寫email給客服來處理，來回處理了兩天左右，客服發送消息給我說他們修正了問題，請至App Store更新最新版，這次更新完後終於可以登入了，還是要給他們的工程師點讚，這個效率算很快了。
BOOM!ANGIN!
原以為事情到這裡就告一個段落了，沒想到更新後導致的問題一一浮現，平常在使用的iPad 3居然連不到我手機的熱點了，一查才發現iOS 15加強了wifi存取保護(Wi-Fi Protected Access)，從wpa2升級到wpa3，導致不支援wpa3的設備將無法連接，而我的iPad 3就這樣再也連不上網路了。更慘的是網路上查了一輪，還是沒找到解決方法。
只能祈求之後會開放可以改wpa2的選項，雖然我覺得很難。._.</description>
    </item>
    
    <item>
      <title>正則表達式筆記</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211214_%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F.md/</link>
      <pubDate>Tue, 14 Dec 2021 13:08:10 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211214_%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F.md/</guid>
      <description>筆記  工作上剛好遇到一個需求，要過濾用戶輸入的英文ID
 判斷規則
 格式限定半形大寫英文 符號只能輸入.、-、/、\還有空白 長度最長為50字元 至少有三個英文字，不可只有符號   原本打算先判斷輸入的正確的英文與符號且長度為3~50，在判斷英文字至少三個。
using System.Text.RegularExpressions; string EnglishName = &amp;#34;TEST-123&amp;#34;//user input Regex.IsMatch(EnglishName, &amp;#34;@^[A-Z//.\\\s]{3,50}$&amp;#34;); Regex.IsMatch(EnglishName, &amp;#34;@^[A-Z{3,}$&amp;#34;); 使用預查來處理這個問題
  正向肯定預查 (?=pattern) 表示從當前位置開始，預測後面的文字必須匹配上pattern 正向否定預查 (?!pattern) 表示從當前位置開始，預測後面的文字必須匹配不上pattern 反向肯定預查 (?&amp;lt;=pattern) 表示從當前位置開始，預測前面的文字必須匹配上pattern 反向否定預查 (?&amp;lt;!pattern) 表示從當前位置開始，預測前面的文字必須匹配不上pattern   有三個英文字後，才會判斷是否為長度3~50且正確的英文與符號。
Regex.IsMatch(EnglishName, &amp;#34;@^(?=.*[A-Z].*[A-Z].*[A-Z])[A-Z//.\\\s]{3,50}$&amp;#34;); 每次要寫RE都要查一下怎麼寫XD，希望我下次不要再忘記啦。
參考 https://www.runoob.com/regexp/regexp-syntax.html https://blog.csdn.net/NAPO687/article/details/110198206</description>
    </item>
    
    <item>
      <title>XBOX Game Pass Ultimate</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211211_xboxgamepass.md/</link>
      <pubDate>Mon, 13 Dec 2021 17:25:11 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211211_xboxgamepass.md/</guid>
      <description>介紹  自小時候我就是Halo(最後一戰)系列的鐵桿粉絲了，在最初代XBOX上面不知道重破了好幾遍，這款遊戲也是我唯一想要購買XBOX的理由了，過了超久到了現在，Halo也不再是XBOX獨佔了(除了Halo 5)，其他版本皆已經能在PC上遊玩，如今Halo Infinite也正式推出，這次鐵了心買了XGPU的會員，一次就給他包3年。這三年微軟自家的遊戲都可以直接玩爆，還有EA PLAY可以玩，絕對玩不完的。 趕回來結束戰鬥
 省錢  網路上有很多教你怎麼儲XGPU最劃算，但是算一算都還是要幾千元，因為台灣的XGPU價格太高了，國外其他地區的價格可能比台灣便宜上不少，所以自行跨區購買或是請人代儲可能是最划算的方案，但是這些風險都比較高，但是我打開淘寶看到代儲3年只要118人民幣，真的是太香了，直接秒速下訂，但發現淘寶的虛擬物品只能透過中國的銀行卡來進行付款，不支持海外刷卡，或是玉山ATM轉帳，只能去蝦皮找代付，看了幾家都差不多錢，公道價應該是1:5.4台幣，換算下來淘寶代儲只需要台幣637，一年只要200出頭，太划算了。
 代儲  代儲最好使用小號且要先把密碼隨便改掉，再給淘寶的店家比較安全，店家登入時會再跟你要登入安全碼，我不確定店家是如何把成本壓那麼低的，不過代儲時會看到自己的信箱收到來自微軟的日文信件的付款訊息，應該官方的沒錯，最後記得把密碼改掉。 代儲時收到的日文信件</description>
    </item>
    
    <item>
      <title>刀劍神域Progressive 無星夜的詠嘆調 劇場版</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211207_%E5%88%80%E5%8A%8D%E7%A5%9E%E5%9F%9Fprogressive.md/</link>
      <pubDate>Thu, 09 Dec 2021 13:29:52 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211207_%E5%88%80%E5%8A%8D%E7%A5%9E%E5%9F%9Fprogressive.md/</guid>
      <description>心得(小雷)  沒想到刀劍神域又出劇場版了，我好興奮啊!!上一次看序列爭戰我還在高雄念書，特別跑去市區超遠的高雄大遠百看4dx，那次也是我第一次體驗4dx的威力，那個動態座椅讓我完全融入在畫面裡面，刀刀砍在背上的感覺，刀削的氣流在耳邊噴發，我現在還在激動啊！總之就是回不去了，當時學生票好像是450還500有點忘記了，這個價錢對於學生的我也是不小的金額，但我還是覺得超值得。
這次去看的電影院是信義威秀，看了一下票價原價要550，這個票價也不是鬧著玩的，身為半個客家人的我，發現蝦皮上面有在賣威秀的招待票一張300元，而且可以看4dx，立馬下定，相見恨晚，太划算了。
用招待票通常是不能拿特典的，但是店員還是發給我，小確幸XD。
刀劍神域Progressive是以亞絲娜作為故事主角出發，講述了進入SAO的原因及第一層的故事，本傳後面出了一堆遊戲但還是沒有比SAO更刺激好看，這個冷飯，真香。劇情還是有做一些修改與本傳不同，多了米特這個角色，她與亞絲娜從最好的朋友，遇到死結時選擇退出隊伍自己離開，到最後互相體諒和好，並走上各自的道路，完美呼應主題曲『前行』的歌詞。
中間一定要加上桐老爺出來裝逼，帥氣收割一波，整體畫面跟音樂我都很滿意，再加上動態座椅的加持，滿分10分我給9.5分，要是能有60FPS那就完美了，2022年也要出另一部劇場版，沒意外也要看4dx!</description>
    </item>
    
    <item>
      <title>指數投資</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211206_%E6%8C%87%E6%95%B8%E6%8A%95%E8%B3%87.md/</link>
      <pubDate>Mon, 06 Dec 2021 10:55:10 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211206_%E6%8C%87%E6%95%B8%E6%8A%95%E8%B3%87.md/</guid>
      <description>前情提要  在過去學生時期的時候就接觸了股票，總覺得要錢滾錢才能財富自由，把打工的錢都拿去玩看看，當時的選股策略是
1.股價夠低(因為本金太小買不起太貴的股票，每一次買股票都是All in)
2.看起來現在在低檔，低到不能再低的感覺
當時All in買了陽明4塊多還5塊，沒過幾天不知怎麼就噴到漲停，抓到一個低買高賣的節奏，沒多久就把它出清了，獲利4000$多，後來又聽朋友建議去買光學鏡頭股玉晶光，也賺了好幾千，我該不會其實很適合玩股票吧XD，直到我膝蓋中了一箭，南亞科賠20000元，沒想到那麼慘，之後就退出股海了。
直到現在全球股市一直突破新高，並且出社會領薪水的時候，我，再次回歸！等等這不會是高點的訊號吧QQ
對了，這邊不做任何投資建議喔，單純心得分享。
 啟蒙  領了薪水後，只能說錢真的賺，現在年輕人基本上沒什麼希望，光活著就已經費盡全力，每週40小時的生命賣給公司，扣掉基本開銷、房租、伙食，可以花的錢也就一萬多吧，還沒有任何娛樂，活著，卻像是個死人，但想到父母為了我也把自己的生命販賣給公司，只為了能讓我有好的生活，我又有什麼好藉口不去努力呢？
看了一本關於理財的書籍『我用死薪水輕鬆理財賺千萬』，讓我了解的資產配置、再平衡與指數投資的基本概念，書中的內容都淺顯易懂，沒有什麼難以離解的東西。之後也看了網路上許多的文章與影片，清流君、魯爸、yp筆記、多拉王與伯格頭投資指南，都讓我堅信指數投資是個GOOD SHIT~
 伯格頭的投資指南
 evelop a workable plan Invest early and ofter Never bear too much or too little risk Diversify Never try to time the market Use index funds when possible Keep costs low Minimize taxes Invest with simplicity Stay the course    開戶準備  伯格頭的投資指南第7條，Keep costs low，盡可能地減少投資成本。
成本最低的應該是台股定期定額(新光證券20000內，手續費1元)
海外複委託美股(富邦證券，0.12%，低消12美金)
海外複委託英股(富邦證券，0.15%，低消15美金)</description>
    </item>
    
    <item>
      <title>簡潔架構 Domain Layer</title>
      <link>https://mindbreaker3310.github.io/posts/post/2021202_%E7%B0%A1%E6%BD%94%E6%9E%B6%E6%A7%8Bdomain.md/</link>
      <pubDate>Thu, 02 Dec 2021 15:52:49 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/2021202_%E7%B0%A1%E6%BD%94%E6%9E%B6%E6%A7%8Bdomain.md/</guid>
      <description>介紹  接下來的筆記是根據線上課程Microservices Architecture and Implementation on .NET 5所記錄下來的，講者的口音有點重，聽得有點吃力，他這個專案基本上重做微軟提供的範例專案，電商系統，完美呈現微服務的使用與他的優點，一共把服務切成四個主要的服務，Catalog(商品目錄系統)、Basket(購物車系統)、Discount(折扣系統)、Ordering(訂單系統)，並分別使用不同的資料庫(mongodb、redis、PostgreSQL、MSSQL)、不同的傳輸協定(Rest API、Grpc)、不同的架構(多層式架構、簡潔架構)，最後使用Docker容器化，把他們都整合在一起運作。
整個系統的架構圖
工作一陣子了，維護的系統基本也都上手了(龐大的Web Service架構)，但還有許多前人的智慧，一時之間是很難理解的XD，這時有一個乾淨的架構，或許上手的時間就可以更短了。
 Domain Layer  建立一個訂單系統使用Clean Architecture
依照分層創建各個不同的Project， Ordering.API Ordering.Domain Ordering.Application Ordering.infrastructure 整個系統的架構圖
建立相依關係Project右鍵 &amp;gt;&amp;gt; Add &amp;gt;&amp;gt; Reference 相依關係
詳細定義與設計可以參考
https://ithelp.ithome.com.tw/articles/10223150 https://ithelp.ithome.com.tw/articles/10223595
 開發Ordering.Domain Layer  我們要先建立兩個資料夾Common、Entities
Common 其中Common放的是我們建立Entity的基礎，含有兩個abstract class，EntityBase、ValueObject，
//我們每一個Entity都要的屬性 public abstract class EntityBase { public int Id { get; protected set; } public string CreatedBy { get; set; } public DateTime CreatedDate { get; set; } public string LastModifiedBy { get; set; } public DateTime?</description>
    </item>
    
    <item>
      <title>CQRS</title>
      <link>https://mindbreaker3310.github.io/posts/post/2021201_cqrs.md/</link>
      <pubDate>Wed, 01 Dec 2021 11:08:44 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/2021201_cqrs.md/</guid>
      <description>筆記  CQRS(Command Query Responsibility Segregation)命令查詢分隔，目前看起來就是不再需要IRepository了，把它拆成Command(負責寫入資料庫的部分)與Query(只負責讀取的部分)。
可以增加資料庫的效能，Command的部分則會透過event的形式記錄起來再同步到DB上面。
我還是偏好原本的方法啊XD
 參考  https://ithelp.ithome.com.tw/articles/10237458</description>
    </item>
    
    <item>
      <title>Domain Driven Design 領域驅動設計</title>
      <link>https://mindbreaker3310.github.io/posts/post/2021130_ddd.md/</link>
      <pubDate>Tue, 30 Nov 2021 14:30:40 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/2021130_ddd.md/</guid>
      <description>關於DDD  隨著科技進步，需求也是越來越複雜，更多的是需要專業領域人員與開發人員共同協作
DDD是一種基於領域知識來解決複雜業務問題的軟體開發方法論。
 Ubiquitous Language  使用通用語言就很重要了，講人話，減少溝通成本。 ex:下訂單大家就聽得懂，別講些什麼call Order API、B2C之類的
 Anemic Model  Anemic Model貧血模型是指那些只有getter、setter沒有行為能力的模型
LF2邪鬼(地獄火焰)防下功+防上跳+防前跳+防下跳+防上功 為例
Devil Max = new Devil(); //使用地獄火焰 Max.Defence().Down().Attack(); Max.Defence().Up().Jump(); Max.Defence().Left().Jump(); Max.Defence().Down().Jump(); Max.Defence().Up().Attack(); 導入DDD與專家討論過後，未來開發的人員直接看程式碼也看得懂在幹嘛
Devil Max = new Devil(); Max.HellFire();  與微服務的關係  很多時候Micorservices不知道怎麼做切割，這時候DDD就提供一個很好的方向去做業務分割。
 參考  https://ithelp.ithome.com.tw/articles/10216645 https://forum.gamer.com.tw/C.php?bsn=7648&amp;snA=3299</description>
    </item>
    
    <item>
      <title>SOLID、SoC</title>
      <link>https://mindbreaker3310.github.io/posts/post/2021129_solid%E5%8E%9F%E5%89%87.md/</link>
      <pubDate>Mon, 29 Nov 2021 16:10:40 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/2021129_solid%E5%8E%9F%E5%89%87.md/</guid>
      <description>SOLID原則  Single responsibility principle 單一功能原則 認為一個class就應該只有一個任務要做，不做其他任務以外的事情，過去是很多不同的需求都用同一個Service，單一功能原則則是提供各種不同的Use Case給各個需求。 SRP示意圖
Open/ closed principle 開閉原則 一個class或Function對於他的擴展是開放的，但是對於修改是封閉的，意思就是不改變他的行為，但是可以增加新的功能。 就像是電動理髮刀，可以換上各種不同的刀頭(擴展)，但是機身本體是不能修改的(封閉)。
Liskov substitution principle 里氏替換原則 程式中的物件應該是可以在不改變正確性的前提下被他的子類所替換的概念，我們在使用「繼承」時，重要的是重複使用 (reuse) 已經寫好的行為，而不是將所有繼承的行為全部覆蓋。
Interface segregation principle 介面隔離原則 很多個客製化的interface比一個通用的interface還要來得更好管理，例如一個政客interface有提出政見()、拜票()、努力工作()，但事實上不是每一個政客都想實作努力工作XD，所以應該方別建兩個interface，政客介面:提出政見()、拜票()與工作介面:努力工作()。
Dependency inversion principle 依賴反轉原則 各個class之間的相依性應該越低越好，上層的class不該依賴下層的class DIP示意圖
 SoC(Separation of concerns) 關注點分離  關注點分離表示，以前端的例子來說，在過去我們是以「關注技術」的方式來分離成HTML、CSS、JavaScript，現今主流框架Vue則是採用「關注元件」的方式來分離，每一個Component都有各自的HTML、CSS、JavaScript。
 參考  https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1) https://medium.com/@f40507777/%E9%96%8B%E6%94%BE%E5%B0%81%E9%96%89%E5%8E%9F%E5%89%87-open-closed-principle-31d61f9d37a5 https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/%E7%AC%AC-10-%E7%AB%A0-%E9%A1%9E%E5%88%A5-clean-code-1c7898d11cd7</description>
    </item>
    
    <item>
      <title>AutoMapper - DI Version</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211125_automapper.md/</link>
      <pubDate>Thu, 25 Nov 2021 14:55:07 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211125_automapper.md/</guid>
      <description>筆記  可以輕鬆的轉換兩個class，讓程式碼變得更加簡短乾淨。
message CouponModel { int32 id = 1; string productName = 2; string description = 3; int32 amount = 4; } 在Grpc定義的優戶券模型
public class Coupon { public int Id { get; set; } public string ProductName { get; set; } public string Description { get; set; } public int Amount { get; set; } } 我們自己定義的模型
原先轉換需要像是這個樣子
Coupon coupon; CouponModel cm = new CouponModel{ id = coupon.Id, productName = coupon.</description>
    </item>
    
    <item>
      <title>Grpc 筆記</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211124_grpcmemo.md/</link>
      <pubDate>Wed, 24 Nov 2021 10:12:35 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211124_grpcmemo.md/</guid>
      <description>筆記  Grpc是google開發的rpc(Remote Procedure Call)框架，用於電腦與電腦之間的溝通，就像電腦A呼叫電腦B做事情，電腦B做好事情後把結果回傳給電腦A，與一般的api不同的地方在於，電腦A、B在進行Grpc溝通前，都必須有protocal buffers檔案來把格式與方法定義清楚，並使用HTTP/2進行傳輸，快速、低延遲、支持串流。
 protocal buffers 檔案  在VS裡面，Add &amp;raquo; New Project &amp;raquo; 選gRPC Service &amp;raquo; &amp;hellip;一些基本設定
生成新gRPC Service後，裡面會有.proto檔案
syntax = &amp;#34;proto3&amp;#34;;//使用的protocal buffers版本  option csharp_namespace = &amp;#34;MyFirstGrpc.Grpc&amp;#34;;//命名空間  package greeter; // 定義交換資料的格式 message HelloRequest { string name = 1; } // 定義交換資料的格式 message HelloReply { string message = 1; } // 定義呼叫api的方法 service Greeter { // SayHello方法需要輸入參數(HelloRequest格式) 會回傳(HelloReply格式)  rpc SayHello (HelloRequest) returns (HelloReply); }  AppSettings 使用Http2  { &amp;#34;Logging&amp;#34;: { &amp;#34;LogLevel&amp;#34;: { &amp;#34;Default&amp;#34;: &amp;#34;Information&amp;#34;, &amp;#34;Microsoft&amp;#34;: &amp;#34;Warning&amp;#34;, &amp;#34;Microsoft.</description>
    </item>
    
  </channel>
</rss>
