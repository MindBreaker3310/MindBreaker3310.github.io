<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on MindBreaker3310</title>
    <link>https://mindbreaker3310.github.io/categories/c#/</link>
    <description>Recent content in C# on MindBreaker3310</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Dec 2021 17:09:56 +0800</lastBuildDate><atom:link href="https://mindbreaker3310.github.io/categories/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>windows排程紀錄主機磁碟狀態</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211217_windows%E6%8E%92%E7%A8%8B%E7%B4%80%E9%8C%84%E4%B8%BB%E6%A9%9F%E7%A3%81%E7%A2%9F%E7%8B%80%E6%85%8B.md/</link>
      <pubDate>Fri, 17 Dec 2021 17:09:56 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211217_windows%E6%8E%92%E7%A8%8B%E7%B4%80%E9%8C%84%E4%B8%BB%E6%A9%9F%E7%A3%81%E7%A2%9F%E7%8B%80%E6%85%8B.md/</guid>
      <description>windows排程紀錄主機磁碟狀態  取得磁碟狀態  工作上總是一堆鳥事，在甲方裡工作有時候又要處理一些完全沒有意義的雜事，浪費時間。
總之因為不明原因，我需要每週紀錄主機的磁碟剩餘容量百分比&amp;hellip;
要取得磁碟訊息很簡單，使用System.IO的DriveInfo.GetDrives()可以取得所有磁碟，再把DriveInfo的屬性取出來
string diskStatus = &amp;#34;&amp;#34;; DriveInfo[] allDrives = DriveInfo.GetDrives(); foreach (DriveInfo d in allDrives) { if (d.IsReady == true)//確定磁碟就緒  { int freePercent = (int)(d.TotalFreeSpace / (float)d.TotalSize * 100); diskStatus += $&amp;#34; {d.Name}{freePercent} &amp;#34; } }  寫入紀錄  這邊一切以簡單為主，直接用寫入文字檔的方式來進行
//如果有額外輸入檔案路徑的話，就把第一個參數當作路徑，沒有就丟在桌面 //若不想在排程器那裡設定開始位置的話，就用絕對路徑吧。 string path = args.Length == 1 ? args[0] : &amp;#34;DiskLog.txt&amp;#34;; //記錄時間 string now = DateRime.Now.ToString(&amp;#34;yyyy/MM/dd HH:mm:ss&amp;#34;); using StreamWriter file = new (path, append: true); file.</description>
    </item>
    
    <item>
      <title>FluentValidation</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211216_fluentvalidation%E9%A9%97%E8%AD%89%E5%A5%97%E4%BB%B6.md/</link>
      <pubDate>Thu, 16 Dec 2021 14:50:26 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211216_fluentvalidation%E9%A9%97%E8%AD%89%E5%A5%97%E4%BB%B6.md/</guid>
      <description>FluentValidation  介紹  雖說在工作上能不用第三方套件就不用，但練習的時候想做什麼就做什麼吧，一切輕鬆、簡單最好了。可以考慮用看看。
紀錄一下常用的功能
using FluentValidation;//使用套件 public class CheckoutOrderCommandValidator : AbstractValidator&amp;lt;CheckoutOrderCommand&amp;gt;//要驗證的class { public CheckoutOrderCommandValidator() { //p代表property  RuleFor(p =&amp;gt; p.UserName)//驗證UserName  .NotEmpty().WithMessage(&amp;#34;UserName 必填&amp;#34;)//不可為空值，若為空值回傳訊息  .NotNull() .MaximumLength(50).WithMessage(&amp;#34;UserName 字數過長&amp;#34;); RuleFor(p =&amp;gt; p.EmailAddress) .NotEmpty().WithMessage(&amp;#34;EmailAddress 必填&amp;#34;); RuleFor(p =&amp;gt; p.TotalPrice) .NotEmpty().WithMessage(&amp;#34;TotalPrice 必填&amp;#34;) .GreaterThan(0).WithMessage(&amp;#34;TotalPrice 需要大於0&amp;#34;); } } 雖說正則表達式、Data Annotation也可以做到，這個看起來還蠻易讀的。</description>
    </item>
    
    <item>
      <title>正則表達式筆記</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211214_%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F.md/</link>
      <pubDate>Tue, 14 Dec 2021 13:08:10 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211214_%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F.md/</guid>
      <description>正則表達式筆記  筆記  工作上剛好遇到一個需求，要過濾用戶輸入的英文ID
 判斷規則
 格式限定半形大寫英文 符號只能輸入.、-、/、\還有空白 長度最長為50字元 至少有三個英文字，不可只有符號   原本打算先判斷輸入的正確的英文與符號且長度為3~50，在判斷英文字至少三個。
using System.Text.RegularExpressions; string EnglishName = &amp;#34;TEST-123&amp;#34;//user input Regex.IsMatch(EnglishName, &amp;#34;@^[A-Z//.\\\s]{3,50}$&amp;#34;); Regex.IsMatch(EnglishName, &amp;#34;@^[A-Z{3,}$&amp;#34;); 使用預查來處理這個問題
  正向肯定預查 (?=pattern) 表示從當前位置開始，預測後面的文字必須匹配上pattern 正向否定預查 (?!pattern) 表示從當前位置開始，預測後面的文字必須匹配不上pattern 反向肯定預查 (?&amp;lt;=pattern) 表示從當前位置開始，預測前面的文字必須匹配上pattern 反向否定預查 (?&amp;lt;!pattern) 表示從當前位置開始，預測前面的文字必須匹配不上pattern   有三個英文字後，才會判斷是否為長度3~50且正確的英文與符號。
Regex.IsMatch(EnglishName, &amp;#34;@^(?=.*[A-Z].*[A-Z].*[A-Z])[A-Z//.\\\s]{3,50}$&amp;#34;); 每次要寫RE都要查一下怎麼寫XD，希望我下次不要再忘記啦。
參考 https://www.runoob.com/regexp/regexp-syntax.html https://blog.csdn.net/NAPO687/article/details/110198206</description>
    </item>
    
    <item>
      <title>使用Grpc服務</title>
      <link>https://mindbreaker3310.github.io/posts/post/2021125_%E4%BD%BF%E7%94%A8grpc%E6%9C%8D%E5%8B%99.md/</link>
      <pubDate>Thu, 25 Nov 2021 15:57:43 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/2021125_%E4%BD%BF%E7%94%A8grpc%E6%9C%8D%E5%8B%99.md/</guid>
      <description>使用Grpc服務  前情提要  購物車的功能需要導入折價券.Grpc的服務
購物車是Client端
折價券是Server端
 新增Grpc服務的reference  VS for Mac在專案下面就可以直接看到Connected Services Windows則是右鍵 &amp;raquo; Add &amp;raquo; connected services
選取購物車專案的connected services &amp;raquo; Add new Grpc service reference &amp;raquo; Add &amp;raquo; 參照折價券.Grpc裡面的.proto &amp;raquo; 選擇Client模式
執行完後，可以看到.csproj多了Grpc服務、專案下也多了protos
&amp;lt;Protobuf Include=&amp;#34;..\..\Discount\Discount.Grpc\Discount.Grpc\Protos\discount.proto&amp;#34; GrpcServices=&amp;#34;Client&amp;#34;&amp;gt; &amp;lt;OutputDir&amp;gt;obj\Debug\net5.0\&amp;lt;/OutputDir&amp;gt; &amp;lt;Link&amp;gt;Protos\discount.proto&amp;lt;/Link&amp;gt; &amp;lt;/Protobuf&amp;gt; 建置專案後，也會產生ProtoServiceClient等cs檔
 參考  https://pjchender.dev/golang/grpc-getting-started/ https://docs.microsoft.com/en-us/aspnet/core/grpc/aspnetcore?view=aspnetcore-6.0&amp;tabs=visual-studio</description>
    </item>
    
    <item>
      <title>AutoMapper - DI Version</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211125_automapper.md/</link>
      <pubDate>Thu, 25 Nov 2021 14:55:07 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211125_automapper.md/</guid>
      <description>AutoMapper 筆記  簡單介紹  可以輕鬆的轉換兩個class，讓程式碼變得更加簡短乾淨。
 範例  message CouponModel { int32 id = 1; string productName = 2; string description = 3; int32 amount = 4; } 在Grpc定義的優戶券模型
public class Coupon { public int Id { get; set; } public string ProductName { get; set; } public string Description { get; set; } public int Amount { get; set; } } 我們自己定義的模型
原先轉換需要像是這個樣子
Coupon coupon; CouponModel cm = new CouponModel{ id = coupon.</description>
    </item>
    
    <item>
      <title>Grpc 筆記</title>
      <link>https://mindbreaker3310.github.io/posts/post/20211124_grpcmemo.md/</link>
      <pubDate>Wed, 24 Nov 2021 10:12:35 +0800</pubDate>
      
      <guid>https://mindbreaker3310.github.io/posts/post/20211124_grpcmemo.md/</guid>
      <description>Grpc 筆記  簡單介紹  Grpc是google開發的rpc(Remote Procedure Call)框架，用於電腦與電腦之間的溝通，就像電腦A呼叫電腦B做事情，電腦B做好事情後把結果回傳給電腦A，與一般的api不同的地方在於，電腦A、B在進行Grpc溝通前，都必須有protocal buffers檔案來把格式與方法定義清楚，並使用HTTP/2進行傳輸，快速、低延遲、支持串流。
 protocal buffers 檔案  syntax = &amp;#34;proto3&amp;#34;;//使用的protocal buffers版本  option csharp_namespace = &amp;#34;MyFirstGrpc.Grpc&amp;#34;;//命名空間  package greeter; // 定義交換資料的格式 message HelloRequest { string name = 1; } // 定義交換資料的格式 message HelloReply { string message = 1; } // 定義呼叫api的方法 service Greeter { // SayHello方法需要輸入參數(HelloRequest格式) 會回傳(HelloReply格式)  rpc SayHello (HelloRequest) returns (HelloReply); }  AppSettings 使用Http2  { &amp;#34;Logging&amp;#34;: { &amp;#34;LogLevel&amp;#34;: { &amp;#34;Default&amp;#34;: &amp;#34;Information&amp;#34;, &amp;#34;Microsoft&amp;#34;: &amp;#34;Warning&amp;#34;, &amp;#34;Microsoft.</description>
    </item>
    
  </channel>
</rss>
